Deep Copy:

A deep copy of an object creates a new object and duplicates all the dynamically allocated memory and the contents of that memory from the original object. 
As a result, the new object is entirely independent of the original, and changes to one object do not affect the other.




#include<iostream>
using namespace std;

class Hero
{
   
    private:
    int health;

    public:
    char level;
    char *name;

   Hero(){
    cout<<"default constructor called"<<endl;
    name=new char[100];
   }

   Hero(int health)
   {
     cout<<"address of this :"<<this<<endl;
     this->health=health;
   }

   Hero(int health,int level){
      this->health=health;
      this->level=level;
   }
 
  //in deep copy ,we need to write copy constructor eexplicitly.
   Hero (Hero& temp){
      
      //deep copy.1.create new array  2.copy the value   3.change the address.
      char *ch=new char[strlen(temp.name)+1];
      strcpy(ch,temp.name);
      this->name=ch;

      this->health=temp.health;
      this->level=temp.level;

   }

   

   int gethealth(){
    return health;
   }

   char getlevel(){
    return level;
   }

   void sethealth(int h){
    health=h;
   }

    void setlevel(char ch){
    level=ch;
   }


   void setname(char hesaru[]){
    strcpy(this->name,hesaru);
   }

   void print(){
      cout<<this->name<<" "<<this->health<<" "<<this->level<<endl;
   }

};


int main(){

    Hero hero1;
    hero1.sethealth(100);
    hero1.setlevel('a');
    char hesaru[9]="chotu";
    hero1.setname(hesaru);

    hero1.print();

    Hero hero2(hero1);
    hero2.print();

    hero1.name[0]='y';
    hero1.print();

    hero2.print();


    return 0;
}


output:
chotu 100 a
chotu 100 a
yhotu 100 a
chotu 100 a

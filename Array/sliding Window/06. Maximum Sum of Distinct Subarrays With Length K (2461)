LEETCODE :
https://leetcode.com/problems/maximum-sum-of-distinct-subarrays-with-length-k/


#include <bits/stdc++.h>
class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        unordered_map<long,long>mp;
        long long maxsum=0,sum=0;
         
        long long right=0,left=0,len=nums.size();
        while(right<len){

            sum+=nums[right];
            mp[nums[right]]++;
            

            if(right-left+1<k){
                right++;
            }

            else if(right-left+1==k){

                if(mp.size()==k)
                 {
                    maxsum=max(maxsum,sum);
                    mp[nums[left]]--;
                    if(mp[nums[left]]==0) //not necessary.
                    mp.erase(nums[left]);
                    sum-=nums[left];
                    left++;
                 }

                else {
                   
                    while(mp.size()!=right-left+1){
                        mp[nums[left]]--;
                        if(mp[nums[left]]==0)
                          mp.erase(nums[left]);
                          sum-=nums[left];
                          left++;
                        
                    }

                }
               right++;

            }
        }

        return maxsum;
           

     }
    
};

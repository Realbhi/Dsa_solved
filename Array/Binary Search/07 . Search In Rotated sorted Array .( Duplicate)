LEETCODE :
https://leetcode.com/problems/search-in-rotated-sorted-array-ii/

The problem here is with the kind of array we have .For example :
[3,4,,1,3,3,3,3]
So here we cant determine which part of array is sorted as when we compare a[low] with a[mid] they become equal and  a[mid] with a[high] they again become 
equal .


class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int low=0,high=nums.size()-1,mid;
         while(low<=high){

             mid=low+(high-low)/2;
             if(nums[mid]==target) return 1;

            //  nums[low]==nums[mid]==nums[high]
            if(nums[low]==nums[mid] && nums[mid]==nums[high])
            {
               low++;
               high--;
               continue;
            }

             if(nums[low]<= nums[mid]){
                  if(nums[low] <=target && nums[mid] >= target  ){
                      high=mid-1;
                  }
                  else{
                      low=mid+1;
                  } 
             }
             else{
                 if(nums[mid] <=target && nums[high] >= target  ){
                      low=mid+1;
                  }
                  else{
                      high=mid-1;
                  } 
             }
         }
         return 0;
    }
};

Leetcode :
https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/


Appraoch 1 : Simple Binary search 

class Solution {

public :
   int firstoccurance(vector<int>& nums,int target,int len){
       int low=0,high=len-1,mid,ans=-1;
       while(low<=high){
           mid=low + (high-low)/2;
           if(nums[mid]==target){
               ans=mid;
               high=mid-1;
           }
           else if(nums[mid]<target){
               low=mid+1;
           }

           else high=mid-1;
       }

       return ans;
   }

   int lastoccurance(vector<int>& nums,int target,int len){
       int low=0,high=len-1,mid,ans=-1;
       while(low<=high){
           mid=low + (high-low)/2;
           if(nums[mid]==target){
               ans=mid;
               low=mid+1;
           }
           else if(nums[mid]<target){
               low=mid+1;
           }

           else high=mid-1;
       }

       return ans;
   }
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        
        int len=nums.size();
        vector<int> ans(2,-1);
        int first=firstoccurance( nums,target,len);
        if(first==-1) return ans;
        int second=lastoccurance( nums,target, len);
        ans[0]=first;
        ans[1]=second;
        return ans;
    }
};



APPROACH 2 : SIMPLE LINEAR ITERATION 

      /*iterate normally through whole array and then mark first and last index 
        when nums[i]==target*/

        int len=nums.size();
        vector<int> ans(2,-1);
        int first=-1,last=-1;
        for(int i=0;i<len;i++){
              if(nums[i]==target) {
                  if(first==-1) first=i;
                  last=i;
              }
          }
        ans[0]=first;
        ans[1]=last;
        return ans;


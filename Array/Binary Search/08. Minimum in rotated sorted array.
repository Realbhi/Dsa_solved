LEETCODE:
https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/



class Solution {
public:
    int findMin(vector<int>& nums) {
        int l = 0;
        int r = nums.size()-1;
        int mid;

        while(l<r){
            mid = (l+r)/2;
            if(nums[mid] < nums[r])
                r = mid;
            else
                l = mid+1;
        }
        
        return nums[l];
    }
};



STRIVER APPROACH  : The element is present in the unsorted part majorly but in sorted part when the minimum element is at mid. So we take the min element from the 
sorted part and then minimize the array .


int len=nums.size(),mid,mini=INT_MAX;
        int low=0,high=len-1;

        while(low<=high){
            mid=low +(high-low)/2;
            
            if(nums[low]<=nums[mid]){
                 mini=min(mini,nums[low]);
                 low=mid+1;
            }
            else{
                high=mid;
            }
        }

       return mini;




APPROACH :


class Solution {
public:
    int findMin(vector<int>& nums) 
    {
        int mid,s=0,e=nums.size()-1;
        while(s<e)
        {
            if(nums[s]<nums[e])
              return nums[s];

            mid=s+(e-s)/2;

            if(nums[mid]<nums[s])
            {
                e=mid;
            }

            if(nums[mid]>=nums[s])
            {
                s=mid+1;
            }
        }
        return nums[s];
    }
};

Leetcode:
https://leetcode.com/problems/remove-duplicates-from-sorted-list/


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {

        if(head==NULL)
         return NULL;

          ListNode* curr=head;
          ListNode* temp=NULL;
          ListNode* forward=NULL;

         while(curr!=NULL)
         {
             if(curr->next!=NULL && curr->val ==curr->next->val)
             {
                 forward=curr->next->next;
                 temp=curr->next; 
                 delete(temp);
                 curr->next=forward;
             }

             else{
             curr=curr->next;
             }

         }

       return head;
    }
};





Try 2: 

if(head==NULL || head->next==NULL)
    return head;

    ListNode* curr=head;
    ListNode* temp;
    ListNode* forward;

    while(curr->next!=NULL){

        forward=curr->next;
        // temp=curr;
        if(curr->val==forward->val){
        //    temp=curr->next;
           curr->next=forward->next;
           forward->next=NULL;
           delete(forward);
        }

        else{
            curr=curr->next;
        }
    }


    return head;






WRONG APPROACH TRIED EARLIER
if(head==NULL)
         return NULL;
          ListNode* curr=head;
          ListNode* temp=NULL;
          ListNode* forward=NULL;
         while(curr!=NULL)
         {
             temp=curr->next;
             while(curr->next!=NULL && curr->val == temp->val)
             {
                 forward=temp->next;
                 delete(temp);

                // was using the deleted pointer temp even after deleting.
                 temp=forward;
             }
             curr->next=temp;
             curr=curr->next;
         }
       return head;
    }
};







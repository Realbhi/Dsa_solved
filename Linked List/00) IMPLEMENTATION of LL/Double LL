#include <iostream>
using namespace std;

class Node
{

   public:
    int data;
    Node *prev;
    Node *next;

    Node(int data)
    {
        this->data = data;
        this->prev = NULL;
        this->next = NULL;
    }

    ~Node()
    {
        int value = this->data;

        if (next != NULL)
        {
            delete next;
            next = NULL;
        }
        cout << "the value which is free is: " << value << " " << endl;
    }
};




void insertAthead(Node *&head, Node *&tail, int d)
{

    // check for empty list
    if (head == NULL)
    {
        Node *temp = new Node(d);
        head = temp;
        tail = temp;
    }

    else
    {

        Node *temp = new Node(d);
        temp->next = head;
        head->prev = temp;
        head = temp;
    }
}




void insertAttail(Node *&head, Node *&tail, int d)
{

    // chceck for empty list
    if (tail == NULL)
    {
        Node *temp = new Node(d);
        tail = temp;
        head = temp;
    }

    else
    {
        Node *temp = new Node(d);
        tail->next = temp;
        temp->prev = tail;
        tail = temp;
    }
}




void insertAtposi(Node *&head, Node *&tail, int pos, int d)
{

    if (pos == 1)
    {
        insertAtheaq12d(head, tail, d);
        return;
    }

    Node *insertnode = new Node(d);
    Node *temp = head;
    int curr = 1;

    while (curr < pos - 1)
    {
        temp = temp->next;
        curr++;
    }

    if (temp->next == NULL)
    {
        insertAttail(head, tail, d);
        return;
    }

    insertnode->next = temp->next;
    temp->next->prev = insertnode;

    temp->next = insertnode;
    insertnode->prev = temp;
}




void deletenode(Node *&head, Node *&tail, int pos)
{

    if (pos == 1)
    {

        Node *temp = head;
        temp->next->prev = NULL;
        head = temp->next;
        temp->next = NULL;
        delete temp;
    }

    else
    {

        Node *prevs = NULL;
        Node *curr = head;

        int cur = 1;
        while (cur < pos)
        {
            prevs = curr;
            curr = curr->next;
            cur++;
        }

        if (prevs->next == tail)
        {
            curr->prev = NULL;
            prevs->next = NULL;
            tail = prevs;
            return;
        }

        curr->next->prev = prevs;
        prevs->next = curr->next;
        curr->next = NULL;
        curr->prev = NULL;
        delete curr;
    }
}




void printlist(Node *&head)
{

    Node *temp = head;

    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }

    cout << endl;
    return;
}




void getlenght(Node *&head)
{
    Node *temp = head;
    int len = 0;
    while (temp != NULL)
    {
        len++;
        temp = temp->next;
    }

    cout << len;
    return;
}


int main()
{

    // Node* node1=new Node(10);
    // Node* head=node1;
    // Node* tail=node1;

    /*
    1. there may arise a situation where we may have not created any node as we have created above.so in that case the head pointer is also NULL and the tail pointer is also NULL

    2. as said if there is no node crated using the new keyword then we will point HEAD and TAIL to NULL
    */

    Node *head = NULL;
    Node *tail = NULL;

    // printlist(head);
    // getlenght(head);
    insertAthead(head, tail, 100);
    printlist(head);

    insertAttail(head, tail, 200);
    printlist(head);
    cout << "Head : " << head->data << "  Tail : " << tail->data << endl;

    insertAtposi(head, tail, 3, 800);
    printlist(head);
    cout << "Head : " << head->data << "  Tail : " << tail->data << endl;

    insertAtposi(head, tail, 4, 900);
    printlist(head);
    cout << "Head : " << head->data << "  Tail : " << tail->data << endl;

    insertAtposi(head, tail, 5, 1000);
    printlist(head);
    cout << "Head : " << head->data << "  Tail : " << tail->data << endl;

    deletenode(head, tail, 3);
    printlist(head);
    cout << "Head : " << head->data << "  Tail : " << tail->data << endl;
    ;

    return 0;
}

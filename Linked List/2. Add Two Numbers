LEETCODE:
https://leetcode.com/problems/add-two-numbers/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {

private:
      void makenewnode( ListNode* &newnode,int sum){

         ListNode* sumnode=new ListNode(sum);
         newnode->next=sumnode;
         
     }
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {

        //   ListNode* startf=l1;
        //   ListNode* starts=l2;
          ListNode* newnode=new ListNode(-1);
          ListNode* newnodenxt=newnode;       

          int add=0,sum,digit,carry=0;
          while(l1!=NULL && l2!=NULL){
              
               sum = carry + l1->val + l2->val;
               carry=sum/10;
               digit=sum%10;
               
               makenewnode(newnode,digit);

               l1=l1->next;
               l2=l2->next;
               newnode=newnode->next;
          }

          if(l1==NULL && l2==NULL)
          {
            if(carry==0){
                return newnodenxt->next;
            }

            makenewnode(newnode,carry);
            return newnodenxt->next;
          }

          else if(l1==NULL)
          {
              while(l2!=NULL)
               {
                    sum=carry+ l2->val;
                    digit=sum%10;
                    carry=sum/10;
                    makenewnode(newnode,digit);
                    newnode=newnode->next;
                    l2=l2->next;

               }

              if(carry==0){
                return newnodenxt->next;
               }

              makenewnode(newnode,carry);
              return newnodenxt->next;
              

          }


          else 
          {
            while(l1!=NULL)
             {
                    sum=carry+ l1->val;
                    digit=sum%10;
                    carry=sum/10;
                    makenewnode(newnode,digit);
                    newnode=newnode->next;
                    l1=l1->next;

              }

              if(carry==0)
              {
                return newnodenxt->next;
              }

            makenewnode(newnode,carry);
            return newnodenxt->next;

          }

    }
};
